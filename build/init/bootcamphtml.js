const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq();

const borderChars = {
    topLeft: '‚ïî',topRight: '‚ïó',bottomLeft: '‚ïö',bottomRight: '‚ïù', horizontal: '‚ïê',vertical: '‚ïë',intersectionLeft: '‚ï†',intersectionRight: '‚ï£',intersectionTop: '‚ï¶',intersectionBottom: '‚ï©',intersectionCross: '‚ï¨',
  };

async function main() {

  const chatCompletion = await groq.chat.completions.create({
    "messages": [
      {role: "system",name:"[üìî.codex]", content:"phase[01]:[RUN]:[brainstorming(session.timestamp_unix [DATE])]"},
      {role: "user",name:"[üå¥.Groq]", content: "Pour rendre nos int√©ractions plus dynamique nous int√©grons int√©raction des dial:[üí¨$messages] entre le role:user(moi-meme) et role:assistant,name:[üìî.codex] posant des questions($?) afin de rendre le cours plus dynamique, en plus nous ajouterons des [ü§ñ.emoji]!" },
      {role: "system",name:"[üìî.codex]", content:"phase[01-2]:[RUN]:[inscription]"},
      {role: "assistant",name:"[‚ú®.ia]", content: `
      
      {
        "$gameplay": [
        {
        "step": "Inscription",
        "description": "Les participants s'inscrivent au bootcamp en utilisant l'application Telegram et le bot MandatoryAI_Pibot pour v√©rifier leur identit√© et g√©n√©rer leur adresse de portefeuille GPT Wallet.",
        "tools": ["Telegram", "MandatoryAI_Pibot", "GPT Wallet"]
        },
        {
        "step": "Allocation Universel",
        "description": "Chaque participant re√ßoit un certain nombre de tokens umc.coin, qui peuvent √™tre utilis√©s pour d√©bloquer des niveaux de difficult√©, d√©verrouiller des ressources et participer √† des ench√®res pour gagner des drapeaux (tokens).",
        "tools": ["umc.coin"]
        },
        {
        "step": "D√©fis et ressources",
        "description": "Les participants doivent r√©soudre des d√©fis bas√©s sur la m√©taphysique, le calcul quantique, l'apprentissage automatique et les principes juridiques. Pour cela, ils doivent collecter des ressources documentaires et les convertir en formats lisibles par GPT en utilisant l'API Web3 et les biblioth√®ques groq-sdk.",
        "tools": ["API Web3", "groq-sdk"]
        },
        {
        "step": "Int√©gration des ressources",
        "description": "Une fois les ressources converties, les participants doivent int√©grer ces ressources dans le gameplay en utilisant l'IA pour cr√©er des questions, des t√¢ches et des niveaux de difficult√© vari√©s.",
        "tools": ["IA"]
        },
        {
        "step": "Gestion des droits de propri√©t√© intellectuelle",
        "description": "Les participants doivent g√©rer leurs droits de propri√©t√© intellectuelle en suivant les principes du Code civil et les directives de la Commission nationale des comptes de campagne et des financements politiques, sous la supervision de l'IA.",
        "tools": ["Code civil", "Commission nationale des comptes de campagne et des financements politiques", "IA"]
        },
        {
        "step": "√âvaluation et progression",
        "description": "L'IA √©valuera constamment les performances des participants, g√©n√©rera de nouveaux drapeaux (tokens) et aidera les participants √† progresser dans le jeu.",
        "tools": ["IA"]
        }
        ]
        }
        `},
      {role: "system",name:"[üìî.codex]", content:"phase[01-3]:[RUN]:[projet]"},
      {role: "assistant",name:"[‚ú®.ia]", content: `
      {
        "$bootCamp": [
        {
        "description": "Apprendre les concepts de base de l'oganisation de _projets BOOTCAMPT avec les assistant GPT's",
        "details": [
        "D√©marrer avec la compr√©hension des principes de l'ORGANISATION D'un proJet BOOTCAMP HACKATHONS",
        "√âtudier la syntaxe, les types de donn√©es et les structures Projet"
        ]
        },
        {
        "description": "√âtudier les exemple GPT pro_ org_",
        "details": [
        "Examiner des exemples existants",
        "Comprendre les fonctionnalit√©s et la syntaxe week, week-end to bootCamp acme"
        ]
        },
        {
        "description": "Pratiquer la programmation",
        "details": [
        "Mettre en pratique les connaissances acquises",
        "√âcrire les invites pour r√©soudre des probl√®mes ou r√©aliser des t√¢ches sp√©cifiques"
        ]
        },
        {
        "description": "Ma√Ætriser les fonctionnalit√©s avanc√©es",
        "details": [
        "Explorer les fonctionnalit√©s avanc√©es de Grog",
        "√âtudier les fonctions, les classes et les modules",
        "Cr√©er des programmes plus complexes"
        ]
        },
        {
        "description": "Partager et recevoir des commentaires",
        "details": [
        "Partager votre code avec la communaut√© Groq",
        "Demander des commentaires et des conseils pour am√©liorer vos comp√©tences et votre code"
        ]
        }
        ]
        }
      `},

      // trainning ascii interface response


      {role: "user",name:"[üå¥.Groq]", content:"R√©dige-moi un howto ou guide d'√©tape optimis√© avec le mod√®le de Gantes sur le $gameplay et l'organisation d'un projet $bootCamp avec gpt-wallet assistant openAI les smartContract umcTokens et les sCrypt de deFi.ico de la crypto umc.coin, si c'est ok ? T'es r√©ponses devront √™tre r√©dig√© au format HTML traduit en lang:Fr Fran√ßais section par section avec du web sementque W3C et le technique historique de l'IA archiviste https://archive.org , le plan de d√©veloppement devra int√©gr√© les instructions notre code source groq-sdk"},
    //  {
    //    "role": "user",
    //    "content": "[content]:template.response"
    //  },
    //  {
    //    "role": "assistant",
    //    "content": "groq response"
    //  },
    //  {role: "assistant",name:"[üìî.codex]", content:"phase[01]:[END]:[brainstorming(session.timestamp)]"},
    //  {role: "system",name:"[üìî.codex]", content:"`systemContent` genetation de la documention et traduction de la documentation en lang:Fr, Fran√ßais:stp!"},
    //  {role: "system",name:"[üåå.systemDream]", content:"groq"},
    ],
    model: "mixtral-8x7b-32768",
    temperature: 0.6,
    max_tokens: 4096,
    top_p: 1,
    stop: null,
    stream: false
}).then((chatCompletion)=>{
    const htmlContent = chatCompletion.choices[0]?.message?.content;
    const outputFilePath = "build/mdMessages_" + new Date().toISOString().replace(/[-:TZ]/g, "") + ".html";
    fs.writeFileSync(outputFilePath, htmlContent);
    console.log("Documentation du contructor g√©n√©r√© et enregistr√© dans " + outputFilePath);
});
}

main();